
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keyboards/keys_fr_cafr.h>


/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        GRAVE_US: GRAVE_US {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_US";
            #binding-cells = <0>;
            bindings = <&kp FR_GRAVE>, <&kp FR_TILDE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        N2_US: N2_US {
            compatible = "zmk,behavior-mod-morph";
            label = "N2_US";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&kp FR_AT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        N3_US: N3_US {
            compatible = "zmk,behavior-mod-morph";
            label = "N3_US";
            #binding-cells = <0>;
            bindings = <&kp N3>, <&kp FR_HASH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        N6_US: N6_US {
            compatible = "zmk,behavior-mod-morph";
            label = "N6_US";
            #binding-cells = <0>;
            bindings = <&kp N6>, <&kp FR_CIRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        LSQUARE_US: LSQUARE_US {
            compatible = "zmk,behavior-mod-morph";
            label = "LSQUARE_US";
            #binding-cells = <0>;
            bindings = <&kp FR_LBKT>, <&kp FR_LBRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        RSQUARE_US: RSQUARE_US {
            compatible = "zmk,behavior-mod-morph";
            label = "RSQUARE_US";
            #binding-cells = <0>;
            bindings = <&kp FR_RBKT>, <&kp FR_RBRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        BSLASH_US: BSLASH_US {
            compatible = "zmk,behavior-mod-morph";
            label = "BSLASH_US";
            #binding-cells = <0>;
            bindings = <&kp FR_BCK_SLSH>, <&kp FR_PIPE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        QUOTE_US: QUOTE_US {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOTE_US";
            #binding-cells = <0>;
            bindings = <&kp FR_SINGLE_QUOTE>, <&kp FR_QUOTE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        COMMA_US: COMMA_US {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_US";
            #binding-cells = <0>;
            bindings = <&kp FR_COMMA>, <&kp FR_LT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        PERIOD_US: PERIOD_US {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_US";
            #binding-cells = <0>;
            bindings = <&kp FR_DOT>, <&kp FR_GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        SLASH_US: SLASH_US {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_US";
            #binding-cells = <0>;
            bindings = <&kp FR_SLASH>, <&kp FR_QUES>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */


    /* Automatically generated keymap */
    keymap {
        compatible = "zmk,keymap";


        base_layer {
            bindings = <
     &kp F1    &kp F2   &kp F3    &kp F4     &kp F5                                                                                  &kp F6     &kp F7       &kp F8       &kp F9      &kp F10
  &kp EQUAL    &kp N1   &N2_US    &N3_US     &kp N4  &kp N5                                                                  &N6_US  &kp N7     &kp N8       &kp N9       &kp N0    &kp MINUS
    &kp TAB     &kp Q    &kp W     &kp E      &kp R   &kp T                                                                   &kp Y   &kp U      &kp I        &kp O        &kp P   &BSLASH_US
    &kp ESC     &kp A    &kp S     &kp D      &kp F   &kp G                                                                   &kp H   &kp J      &kp K        &kp L     &kp SEMI    &QUOTE_US
  &GRAVE_US     &kp Z    &kp X     &kp C      &kp V   &kp B  &kp LSHFT  &kp LCTRL    &lower  &kp LGUI  &kp RCTRL  &kp RSHFT   &kp N   &kp M  &COMMA_US   &PERIOD_US    &SLASH_US    &kp PG_UP
 &magic 2 0  &kp HOME  &kp END  &kp LEFT  &kp RIGHT           &kp BSPC    &kp DEL  &kp LALT  &kp RALT    &kp RET  &kp SPACE          &kp UP   &kp DOWN  &LSQUARE_US  &LSQUARE_US    &kp PG_DN
            >;
        };

        layer_Lower {
            bindings = <
 &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT         &kp C_PP                                                                                    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
       &trans         &none           &none           &none            &none   &kp HOME                                                   &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
       &trans         &none           &none    &kp UP_ARROW            &none    &kp END                                                  &kp RIGHT_PARENTHESIS   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &kp SCROLLLOCK
       &trans         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                            &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
       &trans     &kp K_APP           &none         &kp F11          &kp F12  &kp PG_DN  &trans  &trans   &to 0  &trans  &trans  &trans              &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
   &magic 2 0      &kp CAPS         &kp INS         &kp F11          &kp F12             &trans  &trans  &trans  &trans  &trans  &trans                          &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
      &trans  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
       &none            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none           &none
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

    };
};
